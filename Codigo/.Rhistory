data$RAIN <- ifelse(data$weathersit %in% c(3,4), 1, 0)
data$temp <- (data$temp) * (39-(-8)) + (-8)
data$hum <- data$hum * 100
data$windspeed <- data$windspeed * 67
data$dteday <- as.Date(data$dteday)
start_date <- as.Date("2011-01-01")
data$days_since_2011 <- as.numeric(data$dteday - start_date)
model_data <- data[, c("workingday", "holiday", "season_winter", "season_spring",
"season_summer", "MISTY", "RAIN", "temp", "hum",
"windspeed", "days_since_2011", "cnt")]
# Fit Random Forest model
rf_model <- randomForest(cnt ~ days_since_2011 + temp + hum + windspeed, data = model_data, ntree = 500)
# PDP for days since 2011
pdp_days <- partial(rf_model, pred.var = "days_since_2011", grid.resolution = 100)
ggplot(pdp_days, aes(x = days_since_2011, y = yhat)) +
geom_path() +
geom_line(color = "#9FBFB6") +
geom_rug(alpha=0.9, color = '#D9A282') +
labs(title = "PDP for days_since_2011",
x = "days_since_2011",
y = "Partial Dependence") +
theme_minimal()
ggplot(pdp_days, aes(x = days_since_2011, y = yhat)) +
geom_path() +
geom_line(color = "#9FBFB6") +
geom_rug(alpha=0.9, color = '#D9A282', sides = "l") +  # "l" indica solo el lado izquierdo (eje Y)
labs(title = "PDP for days_since_2011",
x = "days_since_2011",
y = "Partial Dependence") +
theme_minimal()
ggplot(pdp_days, aes(x = days_since_2011, y = yhat)) +
geom_path() +
geom_line(color = "#9FBFB6") +
geom_rug(alpha=0.9, color = '#D9A282', sides = "r") +  # "l" indica solo el lado izquierdo (eje Y)
labs(title = "PDP for days_since_2011",
x = "days_since_2011",
y = "Partial Dependence") +
theme_minimal()
ggplot(pdp_days, aes(x = days_since_2011, y = yhat)) +
geom_path() +
geom_line(color = "#9FBFB6") +
geom_rug(alpha=0.9, color = '#D9A282', sides = "b") +  # "l" indica solo el lado izquierdo (eje Y)
labs(title = "PDP for days_since_2011",
x = "days_since_2011",
y = "Partial Dependence") +
theme_minimal()
ggplot(pdp_days, aes(x = days_since_2011, y = yhat)) +
geom_path() +
geom_line(color = "#9FBFB6") +
geom_rug(alpha=0.9, color = '#D9A282', sides = "t") +  # "l" indica solo el lado izquierdo (eje Y)
labs(title = "PDP for days_since_2011",
x = "days_since_2011",
y = "Partial Dependence") +
theme_minimal()
ggplot(pdp_days, aes(x = days_since_2011, y = yhat)) +
geom_path() +
geom_line(color = "#9FBFB6") +
geom_rug(alpha=0.9, color = '#D9A282', sides = "i") +  # "l" indica solo el lado izquierdo (eje Y)
labs(title = "PDP for days_since_2011",
x = "days_since_2011",
y = "Partial Dependence") +
theme_minimal()
ggplot(pdp_days, aes(x = days_since_2011, y = yhat)) +
geom_path() +
geom_line(color = "#9FBFB6") +
geom_rug(alpha=0.9, color = '#D9A282', sides = "l") +  # "l" indica solo el lado izquierdo (eje Y)
labs(title = "PDP for days_since_2011",
x = "days_since_2011",
y = "Partial Dependence") +
theme_minimal()
ggplot(pdp_days, aes(x = yhat, y = days_since_2011)) +
geom_path() +
geom_line(color = "#9FBFB6") +
geom_rug(alpha=0.9, color = '#D9A282', sides = "l") +  # "l" indica solo el lado izquierdo (eje Y)
labs(title = "PDP for days_since_2011",
x = "days_since_2011",
y = "Partial Dependence") +
theme_minimal()
ggplot(pdp_days, aes(x = days_since_2011, y = yhat)) +
geom_path() +
geom_line(color = "#9FBFB6") +
geom_rug(alpha=0.9, color = '#D9A282', sides = "l") +  # "l" indica solo el lado izquierdo (eje Y)
labs(title = "PDP for days_since_2011",
x = "days_since_2011",
y = "Partial Dependence") +
theme_minimal()
ggplot(pdp_days, aes(x = days_since_2011, y = yhat)) +
geom_path() +
geom_line(color = "#9FBFB6") +
geom_rug(alpha=0.9, color = '#D9A282', sides = "b") +  # "l" indica solo el lado izquierdo (eje Y)
labs(title = "PDP for days_since_2011",
x = "days_since_2011",
y = "Partial Dependence") +
theme_minimal()
# Repeat for other variables
pdp_temp <- partial(rf_model, pred.var = "temp", grid.resolution = 100)
ggplot(pdp_temp, aes(x = temp, y = yhat)) +
geom_path() +
geom_line(color = "#9FBFB6") +
geom_rug(alpha=0.9, color = '#D9A282', sides = "b") +
labs(title = "PDP for Temperature",
x = "Temperature",
y = "Partial Dependence") +
theme_minimal()
pdp_humidity <- partial(rf_model, pred.var = "hum", grid.resolution = 100)
ggplot(pdp_humidity, aes(x = hum, y = yhat)) +
geom_path() +
geom_line(color = "#9FBFB6") +
geom_rug(alpha=0.9, color = '#D9A282', sides = "b") +
labs(title = "PDP for Humidity",
x = "Humidity",
y = "Partial Dependence") +
theme_minimal()
pdp_windspeed <- partial(rf_model, pred.var = "windspeed", grid.resolution = 100)
ggplot(pdp_windspeed, aes(x = windspeed, y = yhat)) +
geom_path() +
geom_line(color = "#9FBFB6") +
geom_rug(alpha=0.9, color = '#D9A282', sides = "b") +
labs(title = "PDP for Windspeed",
x = "Windspeed",
y = "Partial Dependence") +
theme_minimal()
ggplot(pdp_windspeed, aes(x = windspeed, y = yhat)) +
geom_path() +
geom_line(color = "#9FBFB6") +
geom_rug(alpha=0.9, color = '#D9A282', sides = "b") +
labs(title = "PDP for Windspeed",
x = "Windspeed",
y = "Partial Dependence") +
theme_minimal()
library(ggplot2)
library(randomForest)
library(dplyr)
set.seed(123)
sampled_data <- sample_n(model_data, size = 2000)
model <- randomForest(cnt ~ temp + hum, data = sampled_data)
# Create a grid of values for temperature and humidity
temp_seq <- seq(from = min(sampled_data$temp), to = max(sampled_data$temp), length.out = 50)
hum_seq <- seq(from = min(sampled_data$hum), to = max(sampled_data$hum), length.out = 50)
grid <- expand.grid(temp = temp_seq, hum = hum_seq)
grid$predicted_cnt = predict(model, newdata = grid)
p = ggplot() +
geom_tile(data = grid, aes(x = temp, y = hum, fill = predicted_cnt)) +  # Create the 2D plot
geom_density_2d(data = data, aes(x = temp, y = hum), linewidth = 0.3, color = "white") +  # Overlay density lines
scale_fill_gradientn(colors = c("#A62957", "#D966A5", "#2180A6", "#3BC9D9")) +  # Custom color gradient
labs(title = "2D Partial Dependency Plot with Density Overlay",
subtitle = "Effect of Temperature and Humidity on Bike Rentals",
x = "Temperature (°C)", y = "Humidity (%)",
fill = "Predicted Number of Bikes Rented") +
theme_minimal()
p
# Cargar las librerías necesarias
library(ggplot2)
library(randomForest)  # Asumiendo que estás utilizando random forest para el modelo
library(gridExtra)
library(dplyr)
# Asegúrate de que el DataFrame 'model_data' tenga las columnas correctas
if (!("temp" %in% names(model_data)) || !("hum" %in% names(model_data))) {
stop("Las columnas 'temp' y/o 'hum' no existen en model_data")
}
# Muestreo aleatorio de la base de datos para reducir el tamaño
sampled_data <- sample_n(model_data, size = 1000)
# Verificar de nuevo en los datos muestreados (por precaución)
if (!("temp" %in% names(sampled_data)) || !("hum" %in% names(sampled_data))) {
stop("Las columnas 'temp' y/o 'hum' no existen en sampled_data")
}
# Entrenar un modelo de random forest con los datos muestreados
model <- randomForest(cnt ~ temp + hum, data = sampled_data)
# Función para generar datos de PDP bidimensional
generate_2d_pdp_data <- function(model, data, feature1, feature2, n = 30) {
grid1 <- seq(min(data[[feature1]], na.rm = TRUE), max(data[[feature1]], na.rm = TRUE), length.out = n)
grid2 <- seq(min(data[[feature2]], na.rm = TRUE), max(data[[feature2]], na.rm = TRUE), length.out = n)
grid_expand <- expand.grid(feature1 = grid1, feature2 = grid2)
predictions <- matrix(predict(model, newdata = grid_expand), nrow = n, byrow = TRUE)
grid_expand$predicted_count <- as.vector(predictions)
return(grid_expand)
}
# Generar datos PDP
pdp_data <- generate_2d_pdp_data(model, sampled_data, "temp", "hum")
# Load necessary libraries
library(randomForest)
library(ggplot2)
library(dplyr)
# Load the data
kc_house_data <- read.csv("Datos/kc_house_data.csv")
# View the structure of the data
str(kc_house_data)
# Set seed for reproducibility
set.seed(123)
# Sample the data
sampled_data <- kc_house_data %>% sample_n(1000)  # Adjust the sample size as needed
# Train the Random Forest model
# Train the Random Forest model
model <- randomForest(price ~ bedrooms + bathrooms + sqft_living + sqft_lot + floors + yr_built,
data = sampled_data)
# View the model summary
print(model)
# Function to generate partial dependency data for a single feature
generate_pdp_data <- function(model, data, feature, grid_points = 50) {
grid <- data.frame(feature = seq(min(data[[feature]]), max(data[[feature]]), length.out = grid_points))
colnames(grid) <- feature
other_features <- setdiff(names(data), c(feature, "price"))
for (f in other_features) {
grid[[f]] <- mean(data[[f]], na.rm = TRUE)
}
grid$predicted_price <- predict(model, newdata = grid)
return(grid)
}
# Generate PDP data for each feature
features <- c("bedrooms", "bathrooms", "sqft_living", "sqft_lot", "floors", "yr_built")
pdp_data <- lapply(features, function(f) {
pdp <- generate_pdp_data(model, sampled_data, f)
colnames(pdp)[1] <- f
return(pdp)
})
# Function to plot the partial dependency for a single feature with color
plot_pdp <- function(pdp_data, feature, color = "#9FBFB6") {
ggplot(pdp_data, aes_string(x = feature, y = "predicted_price")) +
geom_path() +
geom_line(color = color) +
geom_rug(alpha = 0.9, color = '#D9A282', sides = "b") +
labs(title = paste("Partial Dependency Plot:", feature),
x = feature, y = "Predicted Price") +
theme_minimal()
}
# Create and display PDP plots with color
pdp_plots <- lapply(1:length(features), function(i) plot_pdp(pdp_data[[i]], features[i], color = "#9FBFB6"))
# Print PDP plots
library(gridExtra)
do.call(grid.arrange, c(pdp_plots, ncol = 2))
ggplot(pdp_days, aes(x = days_since_2011, y = yhat)) +
geom_path() +
geom_line(color = "#9FBFB6") +
geom_rug(alpha=0.9, color = '#D9A282', sides = "b") +  # "l" indica solo el lado izquierdo (eje Y)
labs(title = "PDP for days_since_2011",
x = "days_since_2011",
y = "Partial Dependence") +
theme_minimal()
ggplot(pdp_temp, aes(x = temp, y = yhat)) +
geom_path() +
geom_line(color = "#9FBFB6") +
geom_rug(alpha=0.9, color = '#D9A282', sides = "b") +
labs(title = "PDP for Temperature",
x = "Temperature",
y = "Partial Dependence") +
theme_minimal()
ggplot(pdp_humidity, aes(x = hum, y = yhat)) +
geom_path() +
geom_line(color = "#9FBFB6") +
geom_rug(alpha=0.9, color = '#D9A282', sides = "b") +
labs(title = "PDP for Humidity",
x = "Humidity",
y = "Partial Dependence") +
theme_minimal()
ggplot(pdp_windspeed, aes(x = windspeed, y = yhat)) +
geom_path() +
geom_line(color = "#9FBFB6") +
geom_rug(alpha=0.9, color = '#D9A282', sides = "b") +
labs(title = "PDP for Windspeed",
x = "Windspeed",
y = "Partial Dependence") +
theme_minimal()
do.call(grid.arrange, c(pdp_plots, ncol = 2))
library(ggplot2)
library(randomForest)
library(dplyr)
set.seed(123)
sampled_data <- sample_n(model_data, size = 2000)
# Fit a random forest model
model <- randomForest(count ~ hum + temp, data = sampled_data)
# Fit a random forest model
model <- randomForest(cnt ~ hum + temp, data = sampled_data)
generate_2d_pdp_data <- function(model, data, feature1, feature2, n = 30) {
# Create a grid of values for each feature
grid1 <- seq(min(data[[feature1]], na.rm = TRUE), max(data[[feature1]], na.rm = TRUE), length.out = n)
grid2 <- seq(min(data[[feature2]], na.rm = TRUE), max(data[[feature2]], na.rm = TRUE), length.out = n)
grid_expand <- expand.grid(humidity = grid1, temperature = grid2)
# Calculate predictions for each combination
predictions <- matrix(predict(model, newdata = grid_expand), nrow = n, byrow = TRUE)
grid_expand$predicted_count <- as.vector(predictions)
return(grid_expand)
}
pdp_data <- generate_2d_pdp_data(model, sampled_data, "humidity", "temperature")
# Load necessary libraries
library(ggplot2)
library(randomForest)
library(dplyr)
# Ensure the dataset 'bike_data' is loaded and correct
# Check for NA or infinite values in 'humidity' and 'temperature'
if(any(is.na(model_data$hum)) | any(is.infinite(model_data$hum))) {
cat("NA or Infinite values found in 'humidity'\n")
}
if(any(is.na(model_data$temp)) | any(is.infinite(model_data$temp))) {
cat("NA or Infinite values found in 'temperature'\n")
}
# Optionally, remove rows with NAs
bike_data <- na.omit(model_data)
# Sample the data
set.seed(123)  # for reproducibility
sampled_data <- sample_n(bike_data, size = 1000)
# Fit a random forest model
model <- randomForest(cnt ~ hum + temp, data = sampled_data)
# Function to generate 2D PDP data
generate_2d_pdp_data <- function(model, data, feature1, feature2, n = 30) {
# Ensure data is present and not NA or infinite
min_feature1 <- min(data[[feature1]], na.rm = TRUE)
max_feature1 <- max(data[[feature1]], na.rm = TRUE)
min_feature2 <- min(data[[feature2]], na.rm = TRUE)
max_feature2 <- max(data[[feature2]], na.rm = TRUE)
if(!is.finite(min_feature1) | !is.finite(max_feature1)) {
stop("Non-finite values detected for feature1 range.")
}
if(!is.finite(min_feature2) | !is.finite(max_feature2)) {
stop("Non-finite values detected for feature2 range.")
}
grid1 <- seq(min_feature1, max_feature1, length.out = n)
grid2 <- seq(min_feature2, max_feature2, length.out = n)
grid_expand <- expand.grid(humidity = grid1, temperature = grid2)
# Calculate predictions for each combination
predictions <- matrix(predict(model, newdata = grid_expand), nrow = n, byrow = TRUE)
grid_expand$predicted_count <- as.vector(predictions)
return(grid_expand)
}
# Generate PDP data
pdp_data <- generate_2d_pdp_data(model, sampled_data, "humidity", "temperature")
# Load necessary libraries
library(ggplot2)
library(randomForest)
library(dplyr)
# Ensure the dataset 'bike_data' is loaded and correct
# Check for NA or infinite values in 'humidity' and 'temperature'
if(any(is.na(model_data$hum)) | any(is.infinite(model_data$hum))) {
cat("NA or Infinite values found in 'humidity'\n")
}
if(any(is.na(model_data$temp)) | any(is.infinite(model_data$temp))) {
cat("NA or Infinite values found in 'temperature'\n")
}
# Optionally, remove rows with NAs
bike_data <- na.omit(model_data)
# Sample the data
set.seed(123)  # for reproducibility
sampled_data <- sample_n(bike_data, size = 1000)
# Fit a random forest model
model <- randomForest(cnt ~ hum + temp, data = sampled_data)
# Function to generate 2D PDP data
generate_2d_pdp_data <- function(model, data, feature1, feature2, n = 30) {
# Ensure data is present and not NA or infinite
min_feature1 <- min(data[[feature1]], na.rm = TRUE)
max_feature1 <- max(data[[feature1]], na.rm = TRUE)
min_feature2 <- min(data[[feature2]], na.rm = TRUE)
max_feature2 <- max(data[[feature2]], na.rm = TRUE)
if(!is.finite(min_feature1) | !is.finite(max_feature1)) {
stop("Non-finite values detected for feature1 range.")
}
if(!is.finite(min_feature2) | !is.finite(max_feature2)) {
stop("Non-finite values detected for feature2 range.")
}
grid1 <- seq(min_feature1, max_feature1, length.out = n)
grid2 <- seq(min_feature2, max_feature2, length.out = n)
grid_expand <- expand.grid(humidity = grid1, temperature = grid2)
# Calculate predictions for each combination
predictions <- matrix(predict(model, newdata = grid_expand), nrow = n, byrow = TRUE)
grid_expand$predicted_count <- as.vector(predictions)
return(grid_expand)
}
# Generate PDP data
pdp_data <- generate_2d_pdp_data(model, sampled_data, "hum", "temp")
View(sampled_data)
View(model)
# Load necessary libraries
library(ggplot2)
library(randomForest)
library(dplyr)
# Ensure the dataset 'model_data' is loaded and correct
# Check for NA or infinite values in 'hum' and 'temp'
if(any(is.na(model_data$hum)) | any(is.infinite(model_data$hum))) {
cat("NA or Infinite values found in 'humidity'\n")
}
if(any(is.na(model_data$temp)) | any(is.infinite(model_data$temp))) {
cat("NA or Infinite values found in 'temperature'\n")
}
# Optionally, remove rows with NAs
bike_data <- na.omit(model_data)
# Sample the data
set.seed(123)  # for reproducibility
sampled_data <- sample_n(bike_data, size = 1000)
# Fit a random forest model
model <- randomForest(cnt ~ hum + temp, data = sampled_data)
# Function to generate 2D PDP data
generate_2d_pdp_data <- function(model, data, feature1, feature2, n = 30) {
# Ensure data is present and not NA or infinite
min_feature1 <- min(data[[feature1]], na.rm = TRUE)
max_feature1 <- max(data[[feature1]], na.rm = TRUE)
min_feature2 <- min(data[[feature2]], na.rm = TRUE)
max_feature2 <- max(data[[feature2]], na.rm = TRUE)
if(!is.finite(min_feature1) | !is.finite(max_feature1)) {
stop("Non-finite values detected for feature1 range.")
}
if(!is.finite(min_feature2) | !is.finite(max_feature2)) {
stop("Non-finite values detected for feature2 range.")
}
grid1 <- seq(min_feature1, max_feature1, length.out = n)
grid2 <- seq(min_feature2, max_feature2, length.out = n)
grid_expand <- expand.grid(humidity = grid1, temperature = grid2) # Adjusted to match your column names
# Calculate predictions for each combination
predictions <- matrix(predict(model, newdata = grid_expand), nrow = n, byrow = TRUE)
grid_expand$predicted_count <- as.vector(predictions)
return(grid_expand)
}
# Generate PDP data using the correct feature names
pdp_data <- generate_2d_pdp_data(model, sampled_data, "hum", "temp")
# Load necessary libraries
library(randomForest)
library(ggplot2)
library(dplyr)
set.seed(123)
sampled_data <- sample_n(model_data, size = 2000)
model <- randomForest(cnt ~ temp + hum, data = sampled_data)
# Assuming 'model' is your trained random forest model and 'sampled_data' is your dataset
# Generate a grid of values for humidity and temperature
generate_pdp_grid <- function(data, feature1, feature2, n = 30) {
grid1 <- seq(min(data[[feature1]], na.rm = TRUE), max(data[[feature1]], na.rm = TRUE), length.out = n)
grid2 <- seq(min(data[[feature2]], na.rm = TRUE), max(data[[feature2]], na.rm = TRUE), length.out = n)
expand.grid(hum = grid1, temp = grid2)
}
pdp_grid <- generate_pdp_grid(sampled_data, "hum", "temp")
# Predict using the model for each combination in the grid
pdp_grid$predicted_count <- predict(model, newdata = pdp_grid)
# Plot using geom_tile()
pdp_plot <- ggplot(pdp_grid, aes(x = hum, y = temp, fill = predicted_count)) +
geom_tile(width = 1, height = 1) +  # Adjust width and height as needed to avoid gaps
scale_fill_gradient(low = "blue", high = "red", name = "Bike Count") +
labs(title = "2D Partial Dependency Plot on Bike Rentals", x = "Humidity", y = "Temperature") +
theme_minimal()
print(pdp_plot)
p = ggplot() +
geom_tile(data = grid, aes(x = temp, y = hum, fill = predicted_cnt)) +  # Create the 2D plot
geom_density_2d(data = data, aes(x = temp, y = hum), linewidth = 0.3, color = "white") +  # Overlay density lines
scale_fill_gradientn(colors = c("#143340", "#9FBFB6", "#F2D4AE", "#D9A282")) +  # Custom color gradient
labs(title = "2D Partial Dependency Plot with Density Overlay",
subtitle = "Effect of Temperature and Humidity on Bike Rentals",
x = "Temperature (°C)", y = "Humidity (%)",
fill = "Predicted Number of Bikes Rented") +
theme_minimal()
p
p = ggplot() +
geom_tile(data = grid, aes(x = temp, y = hum, fill = predicted_cnt)) +  # Create the 2D plot
geom_density_2d(data = data, aes(x = temp, y = hum), linewidth = 0.3, color = "white") +  # Overlay density lines
scale_fill_gradientn(colors = c("#A64E2E", "#9FBFB6", "#F2D4AE", "#D9A282")) +  # Custom color gradient
labs(title = "2D Partial Dependency Plot with Density Overlay",
subtitle = "Effect of Temperature and Humidity on Bike Rentals",
x = "Temperature (°C)", y = "Humidity (%)",
fill = "Predicted Number of Bikes Rented") +
theme_minimal()
p
p = ggplot() +
geom_tile(data = grid, aes(x = temp, y = hum, fill = predicted_cnt)) +  # Create the 2D plot
geom_density_2d(data = data, aes(x = temp, y = hum), linewidth = 0.3, color = "white") +  # Overlay density lines
scale_fill_gradientn(colors = c("#416C7B", "#9FBFB6", "#F2D4AE", "#D9A282")) +  # Custom color gradient
labs(title = "2D Partial Dependency Plot with Density Overlay",
subtitle = "Effect of Temperature and Humidity on Bike Rentals",
x = "Temperature (°C)", y = "Humidity (%)",
fill = "Predicted Number of Bikes Rented") +
theme_minimal()
p
# Load necessary libraries
library(randomForest)
library(ggplot2)
library(dplyr)
kc_house_data <- read.csv("Datos/kc_house_data.csv")
str(kc_house_data)
# Set seed for reproducibility
set.seed(123)
# Sample the data
sampled_data <- kc_house_data %>% sample_n(1000)  # Adjust the sample size as needed
# Train the Random Forest model
model <- randomForest(price ~ bedrooms + bathrooms + sqft_living + sqft_lot + floors + yr_built,
data = sampled_data)
# Function to generate partial dependency data for a single feature
generate_pdp_data <- function(model, data, feature, grid_points = 50) {
grid <- data.frame(feature = seq(min(data[[feature]]), max(data[[feature]]), length.out = grid_points))
colnames(grid) <- feature
other_features <- setdiff(names(data), c(feature, "price"))
for (f in other_features) {
grid[[f]] <- mean(data[[f]], na.rm = TRUE)
}
grid$predicted_price <- predict(model, newdata = grid)
return(grid)
}
# Generate PDP data for each feature
features <- c("bedrooms", "bathrooms", "sqft_living", "sqft_lot", "floors", "yr_built")
pdp_data <- lapply(features, function(f) {
pdp <- generate_pdp_data(model, sampled_data, f)
colnames(pdp)[1] <- f
return(pdp)
})
# Function to plot the partial dependency for a single feature with color
plot_pdp <- function(pdp_data, feature, color = "#9FBFB6") {
ggplot(pdp_data, aes_string(x = feature, y = "predicted_price")) +
geom_path() +
geom_line(color = color) +
geom_rug(alpha = 0.9, color = '#D9A282', sides = "b") +
labs(title = paste("Partial Dependency Plot:", feature),
x = feature, y = "Predicted Price") +
theme_minimal()
}
# Create and display PDP plots with color
pdp_plots <- lapply(1:length(features), function(i) plot_pdp(pdp_data[[i]], features[i], color = "#9FBFB6"))
# Print PDP plots
library(gridExtra)
do.call(grid.arrange, c(pdp_plots, ncol = 2))
p
