grid_expand <- expand.grid(humidity = grid1, temperature = grid2)
# Calculate predictions for each combination
predictions <- matrix(predict(model, newdata = grid_expand), nrow = n, byrow = TRUE)
grid_expand$predicted_count <- as.vector(predictions)
return(grid_expand)
}
# Generate PDP data
pdp_data <- generate_2d_pdp_data(model, sampled_data, "hum", "temp")
View(sampled_data)
View(model)
# Load necessary libraries
library(ggplot2)
library(randomForest)
library(dplyr)
# Ensure the dataset 'model_data' is loaded and correct
# Check for NA or infinite values in 'hum' and 'temp'
if(any(is.na(model_data$hum)) | any(is.infinite(model_data$hum))) {
cat("NA or Infinite values found in 'humidity'\n")
}
if(any(is.na(model_data$temp)) | any(is.infinite(model_data$temp))) {
cat("NA or Infinite values found in 'temperature'\n")
}
# Optionally, remove rows with NAs
bike_data <- na.omit(model_data)
# Sample the data
set.seed(123)  # for reproducibility
sampled_data <- sample_n(bike_data, size = 1000)
# Fit a random forest model
model <- randomForest(cnt ~ hum + temp, data = sampled_data)
# Function to generate 2D PDP data
generate_2d_pdp_data <- function(model, data, feature1, feature2, n = 30) {
# Ensure data is present and not NA or infinite
min_feature1 <- min(data[[feature1]], na.rm = TRUE)
max_feature1 <- max(data[[feature1]], na.rm = TRUE)
min_feature2 <- min(data[[feature2]], na.rm = TRUE)
max_feature2 <- max(data[[feature2]], na.rm = TRUE)
if(!is.finite(min_feature1) | !is.finite(max_feature1)) {
stop("Non-finite values detected for feature1 range.")
}
if(!is.finite(min_feature2) | !is.finite(max_feature2)) {
stop("Non-finite values detected for feature2 range.")
}
grid1 <- seq(min_feature1, max_feature1, length.out = n)
grid2 <- seq(min_feature2, max_feature2, length.out = n)
grid_expand <- expand.grid(humidity = grid1, temperature = grid2) # Adjusted to match your column names
# Calculate predictions for each combination
predictions <- matrix(predict(model, newdata = grid_expand), nrow = n, byrow = TRUE)
grid_expand$predicted_count <- as.vector(predictions)
return(grid_expand)
}
# Generate PDP data using the correct feature names
pdp_data <- generate_2d_pdp_data(model, sampled_data, "hum", "temp")
# Load necessary libraries
library(randomForest)
library(ggplot2)
library(dplyr)
set.seed(123)
sampled_data <- sample_n(model_data, size = 2000)
model <- randomForest(cnt ~ temp + hum, data = sampled_data)
# Assuming 'model' is your trained random forest model and 'sampled_data' is your dataset
# Generate a grid of values for humidity and temperature
generate_pdp_grid <- function(data, feature1, feature2, n = 30) {
grid1 <- seq(min(data[[feature1]], na.rm = TRUE), max(data[[feature1]], na.rm = TRUE), length.out = n)
grid2 <- seq(min(data[[feature2]], na.rm = TRUE), max(data[[feature2]], na.rm = TRUE), length.out = n)
expand.grid(hum = grid1, temp = grid2)
}
pdp_grid <- generate_pdp_grid(sampled_data, "hum", "temp")
# Predict using the model for each combination in the grid
pdp_grid$predicted_count <- predict(model, newdata = pdp_grid)
# Plot using geom_tile()
pdp_plot <- ggplot(pdp_grid, aes(x = hum, y = temp, fill = predicted_count)) +
geom_tile(width = 1, height = 1) +  # Adjust width and height as needed to avoid gaps
scale_fill_gradient(low = "blue", high = "red", name = "Bike Count") +
labs(title = "2D Partial Dependency Plot on Bike Rentals", x = "Humidity", y = "Temperature") +
theme_minimal()
print(pdp_plot)
p = ggplot() +
geom_tile(data = grid, aes(x = temp, y = hum, fill = predicted_cnt)) +  # Create the 2D plot
geom_density_2d(data = data, aes(x = temp, y = hum), linewidth = 0.3, color = "white") +  # Overlay density lines
scale_fill_gradientn(colors = c("#143340", "#9FBFB6", "#F2D4AE", "#D9A282")) +  # Custom color gradient
labs(title = "2D Partial Dependency Plot with Density Overlay",
subtitle = "Effect of Temperature and Humidity on Bike Rentals",
x = "Temperature (°C)", y = "Humidity (%)",
fill = "Predicted Number of Bikes Rented") +
theme_minimal()
p
p = ggplot() +
geom_tile(data = grid, aes(x = temp, y = hum, fill = predicted_cnt)) +  # Create the 2D plot
geom_density_2d(data = data, aes(x = temp, y = hum), linewidth = 0.3, color = "white") +  # Overlay density lines
scale_fill_gradientn(colors = c("#A64E2E", "#9FBFB6", "#F2D4AE", "#D9A282")) +  # Custom color gradient
labs(title = "2D Partial Dependency Plot with Density Overlay",
subtitle = "Effect of Temperature and Humidity on Bike Rentals",
x = "Temperature (°C)", y = "Humidity (%)",
fill = "Predicted Number of Bikes Rented") +
theme_minimal()
p
p = ggplot() +
geom_tile(data = grid, aes(x = temp, y = hum, fill = predicted_cnt)) +  # Create the 2D plot
geom_density_2d(data = data, aes(x = temp, y = hum), linewidth = 0.3, color = "white") +  # Overlay density lines
scale_fill_gradientn(colors = c("#416C7B", "#9FBFB6", "#F2D4AE", "#D9A282")) +  # Custom color gradient
labs(title = "2D Partial Dependency Plot with Density Overlay",
subtitle = "Effect of Temperature and Humidity on Bike Rentals",
x = "Temperature (°C)", y = "Humidity (%)",
fill = "Predicted Number of Bikes Rented") +
theme_minimal()
p
# Load necessary libraries
library(randomForest)
library(ggplot2)
library(dplyr)
kc_house_data <- read.csv("Datos/kc_house_data.csv")
str(kc_house_data)
# Set seed for reproducibility
set.seed(123)
# Sample the data
sampled_data <- kc_house_data %>% sample_n(1000)  # Adjust the sample size as needed
# Train the Random Forest model
model <- randomForest(price ~ bedrooms + bathrooms + sqft_living + sqft_lot + floors + yr_built,
data = sampled_data)
# Function to generate partial dependency data for a single feature
generate_pdp_data <- function(model, data, feature, grid_points = 50) {
grid <- data.frame(feature = seq(min(data[[feature]]), max(data[[feature]]), length.out = grid_points))
colnames(grid) <- feature
other_features <- setdiff(names(data), c(feature, "price"))
for (f in other_features) {
grid[[f]] <- mean(data[[f]], na.rm = TRUE)
}
grid$predicted_price <- predict(model, newdata = grid)
return(grid)
}
# Generate PDP data for each feature
features <- c("bedrooms", "bathrooms", "sqft_living", "sqft_lot", "floors", "yr_built")
pdp_data <- lapply(features, function(f) {
pdp <- generate_pdp_data(model, sampled_data, f)
colnames(pdp)[1] <- f
return(pdp)
})
# Function to plot the partial dependency for a single feature with color
plot_pdp <- function(pdp_data, feature, color = "#9FBFB6") {
ggplot(pdp_data, aes_string(x = feature, y = "predicted_price")) +
geom_path() +
geom_line(color = color) +
geom_rug(alpha = 0.9, color = '#D9A282', sides = "b") +
labs(title = paste("Partial Dependency Plot:", feature),
x = feature, y = "Predicted Price") +
theme_minimal()
}
# Create and display PDP plots with color
pdp_plots <- lapply(1:length(features), function(i) plot_pdp(pdp_data[[i]], features[i], color = "#9FBFB6"))
# Print PDP plots
library(gridExtra)
do.call(grid.arrange, c(pdp_plots, ncol = 2))
p
#install.packages("randomForest")
#install.packages("pdp")
library(randomForest)
library(pdp)
library(ggplot2)
data = read.csv('Datos/hour.csv')
data$season_winter <- ifelse(data$season == 1, 1, 0)
data$season_spring <- ifelse(data$season == 2, 1, 0)
data$season_summer <- ifelse(data$season == 3, 1, 0)
data$MISTY <- ifelse(data$weathersit == 2, 1, 0)
data$RAIN <- ifelse(data$weathersit %in% c(3,4), 1, 0)
data$temp <- (data$temp) * (39-(-8)) + (-8)
data$hum <- data$hum * 100
data$windspeed <- data$windspeed * 67
data$dteday <- as.Date(data$dteday)
start_date <- as.Date("2011-01-01")
data$days_since_2011 <- as.numeric(data$dteday - start_date)
model_data <- data[, c("workingday", "holiday", "season_winter", "season_spring",
"season_summer", "MISTY", "RAIN", "temp", "hum",
"windspeed", "days_since_2011", "cnt")]
# Fit Random Forest model
rf_model <- randomForest(cnt ~ days_since_2011 + temp + hum + windspeed, data = model_data, ntree = 500)
#install.packages("randomForest")
#install.packages("pdp")
library(randomForest)
library(pdp)
library(ggplot2)
data = read.csv('Datos/hour.csv')
data$season_winter <- ifelse(data$season == 1, 1, 0)
data$season_spring <- ifelse(data$season == 2, 1, 0)
data$season_summer <- ifelse(data$season == 3, 1, 0)
data$MISTY <- ifelse(data$weathersit == 2, 1, 0)
data$RAIN <- ifelse(data$weathersit %in% c(3,4), 1, 0)
data$temp <- (data$temp) * (39-(-8)) + (-8)
data$hum <- data$hum * 100
data$windspeed <- data$windspeed * 67
data$dteday <- as.Date(data$dteday)
start_date <- as.Date("2011-01-01")
data$days_since_2011 <- as.numeric(data$dteday - start_date)
model_data <- data[, c("workingday", "holiday", "season_winter", "season_spring",
"season_summer", "MISTY", "RAIN", "temp", "hum",
"windspeed", "days_since_2011", "cnt")]
# Fit Random Forest model
rf_model <- randomForest(cnt ~ days_since_2011 + temp + hum + windspeed, data = model_data, ntree = 500)
# PDP for days since 2011
pdp_days <- partial(rf_model, pred.var = "days_since_2011", grid.resolution = 100)
p1 = ggplot(days_since, aes(x = days_since_2011, y = yhat)) +
geom_line() + ylim(c(0,6000)) + geom_rug(alpha = 0.1, sides = "b") +
ylab("Prediction") + xlab("Days since 2011")
p1 = ggplot(pdp_days, aes(x = days_since_2011, y = yhat)) +
geom_line() + ylim(c(0,6000)) + geom_rug(alpha = 0.1, sides = "b") +
ylab("Prediction") + xlab("Days since 2011")
p1
p1 = ggplot(pdp_days, aes(x = days_since_2011, y = yhat)) +
geom_line() + ylim(c(0,60)) + geom_rug(alpha = 0.1, sides = "b") +
ylab("Prediction") + xlab("Days since 2011")
p1 = ggplot(pdp_days, aes(x = days_since_2011, y = yhat)) +
geom_line() + ylim(c(0,60)) + geom_rug(alpha = 0.1, sides = "b") +
ylab("Prediction") + xlab("Days since 2011")
p1
p1 = ggplot(pdp_days, aes(x = days_since_2011, y = yhat)) +
geom_line() + ylim(c(0,6000)) + geom_rug(alpha = 0.1, sides = "b") +
ylab("Prediction") + xlab("Days since 2011")
p1
p1 = ggplot(pdp_days, aes(x = days_since_2011, y = yhat)) +
geom_line() + ylim(c(0,90000000)) + geom_rug(alpha = 0.1, sides = "b") +
ylab("Prediction") + xlab("Days since 2011")
p1
p1 = ggplot(pdp_days, aes(x = days_since_2011, y = yhat)) +
geom_line() + ylim(c(0,900)) + geom_rug(alpha = 0.1, sides = "b") +
ylab("Prediction") + xlab("Days since 2011")
p1
p1 = ggplot(pdp_days, aes(x = days_since_2011, y = yhat)) +
geom_line() + ylim(c(0,900)) + geom_rug(alpha = 0.1) +
ylab("Prediction") + xlab("Days since 2011")
p1
#install.packages("randomForest")
#install.packages("pdp")
library(randomForest)
library(dplyr)
library(pdp)
library(plotly)
library(ggplot2)
library(reshape2)
library(lubridate)
library(randomForestSRC)
install.packages('randomForestSRC')
#install.packages("randomForest")
#install.packages("pdp")
library(randomForest)
library(dplyr)
library(pdp)
library(plotly)
library(ggplot2)
library(reshape2)
library(lubridate)
library(randomForestSRC)
days <- read.csv("Datos/day.csv")
hour <- read.csv("Datos/hour.csv")
days$dteday <- as_date(days$dteday)
days_since <- select(days, workingday, holiday, temp, hum, windspeed, cnt)
days_since$days_since_2011 <- int_length(interval(ymd("2011-01-01"), days$dteday)) / (3600*24)
days_since$SUMMER <- ifelse(days$season == 3, 1, 0)
days_since$FALL <- ifelse(days$season == 4, 1, 0)
days_since$WINTER <- ifelse(days$season == 1, 1, 0)
days_since$MISTY <- ifelse(days$weathersit == 2, 1, 0)
days_since$RAIN <- ifelse(days$weathersit == 3 | days$weathersit == 4, 1, 0)
days_since$temp <- days_since$temp * 47 - 8
days_since$hum <- days_since$hum * 100
days_since$windspeed <- days_since$windspeed * 67
rf <- rfsrc(cnt~., data=days_since)
results <- select(days_since, days_since_2011, temp, hum, windspeed, cnt)
nr <- nrow(days_since)
for(c in names(results)[1:4])
{
for(i in 1:nr){
r <- days_since
r[[c]] <- days_since[[c]][i]
sal <- predict(rf, r)$predicted
results[[c]][i] <- sum(sal) / nr
}
}
p1 = ggplot(days_since, aes(x = days_since_2011, y = results$days_since_2011)) +
geom_line() + ylim(c(0,6000)) + geom_rug(alpha = 0.1, sides = "b") +
ylab("Prediction") + xlab("Days since 2011")
p2 = ggplot(days_since, aes(x = temp, y=results$temp)) + geom_line() + ylim(c(0,6000)) +
geom_rug(alpha = 0.1, sides = "b")+ xlab("Temperature")
p3 = ggplot(days_since, aes(x = hum, y = results$hum)) + geom_line() + ylim(c(0,6000)) +
geom_rug(alpha = 0.1, sides = "b") + xlab("Humidity")
p4 = ggplot(days_since, aes(x = windspeed, y = results$windspeed)) + geom_line() + ylim(c(0,6000)) +
geom_rug(alpha = 0.1, sides = "b") + xlab("Wind speed")
subplot(p1, p2, p3, p4, shareY = TRUE, shareX = FALSE, titleX = TRUE)
p1
pw
p2
p1
p3
p4
p1 = ggplot(days_since, aes(x = days_since_2011, y = results$days_since_2011)) +
geom_line() + ylim(c(0,6000)) + geom_rug(alpha = 0.1, sides = "b") +
ylab("Prediction") + xlab("Days since 2011")
p2 = ggplot(days_since, aes(x = temp, y=results$temp)) + geom_line() + ylim(c(0,6000)) +
geom_rug(alpha = 0.1, sides = "b")+ xlab("Temperature")
p3 = ggplot(days_since, aes(x = hum, y = results$hum)) + geom_line() + ylim(c(0,6000)) +
geom_rug(alpha = 0.1, sides = "b") + xlab("Humidity")
p4 = ggplot(days_since, aes(x = windspeed, y = results$windspeed)) + geom_line() + ylim(c(0,6000)) +
geom_rug(alpha = 0.1, sides = "b") + xlab("Wind speed")
subplot(p1, p2, p3, p4, shareY = TRUE, shareX = FALSE, titleX = TRUE)
p1 = ggplot(days_since, aes(x = days_since_2011, y = results$days_since_2011)) +
geom_line(color = "#9FBFB6") + ylim(c(0,6000)) + geom_rug(alpha = 0.1, sides = "b") +
ylab("Prediction") + xlab("Days since 2011")
p2 = ggplot(days_since, aes(x = temp, y=results$temp)) + geom_line() + ylim(c(0,6000)) +
geom_rug(alpha = 0.1, sides = "b")+ xlab("Temperature")
p3 = ggplot(days_since, aes(x = hum, y = results$hum)) + geom_line() + ylim(c(0,6000)) +
geom_rug(alpha = 0.1, sides = "b") + xlab("Humidity")
p4 = ggplot(days_since, aes(x = windspeed, y = results$windspeed)) + geom_line() + ylim(c(0,6000)) +
geom_rug(alpha = 0.1, sides = "b") + xlab("Wind speed")
subplot(p1, p2, p3, p4, shareY = TRUE, shareX = FALSE, titleX = TRUE)
p1 = ggplot(days_since, aes(x = days_since_2011, y = results$days_since_2011)) +
geom_line(color = "#9FBFB6") + ylim(c(0,6000)) + geom_rug(alpha = 0.1,color = '#D9A282', sides = "b") +
ylab("Prediction") + xlab("Days since 2011")
p2 = ggplot(days_since, aes(x = temp, y=results$temp)) + geom_line(color = "#9FBFB6") + ylim(c(0,6000)) +
geom_rug(alpha = 0.1, color = '#D9A282',sides = "b")+ xlab("Temperature")
p3 = ggplot(days_since, aes(x = hum, y = results$hum)) + geom_line(color = "#9FBFB6") + ylim(c(0,6000)) +
geom_rug(alpha = 0.1, color = '#D9A282',sides = "b") + xlab("Humidity")
p4 = ggplot(days_since, aes(x = windspeed, y = results$windspeed)) + geom_line(color = "#9FBFB6") + ylim(c(0,6000)) +
geom_rug(alpha = 0.1, color = '#D9A282',sides = "b") + xlab("Wind speed")
subplot(p1, p2, p3, p4, shareY = TRUE, shareX = FALSE, titleX = TRUE)
p1
p2
p1 = ggplot(days_since, aes(x = days_since_2011, y = results$days_since_2011)) +
geom_line(color = "#9FBFB6") + ylim(c(0,6000)) + geom_rug(alpha = 0.9,color = '#D9A282', sides = "b") +
ylab("Prediction") + xlab("Days since 2011")
p2 = ggplot(days_since, aes(x = temp, y=results$temp)) + geom_line(color = "#9FBFB6") + ylim(c(0,6000)) +
geom_rug(alpha = 0.1, color = '#D9A282',sides = "b")+ xlab("Temperature")
p3 = ggplot(days_since, aes(x = hum, y = results$hum)) + geom_line(color = "#9FBFB6") + ylim(c(0,6000)) +
geom_rug(alpha = 0.1, color = '#D9A282',sides = "b") + xlab("Humidity")
p4 = ggplot(days_since, aes(x = windspeed, y = results$windspeed)) + geom_line(color = "#9FBFB6") + ylim(c(0,6000)) +
geom_rug(alpha = 0.1, color = '#D9A282',sides = "b") + xlab("Wind speed")
subplot(p1, p2, p3, p4, shareY = TRUE, shareX = FALSE, titleX = TRUE)
p1
p1 = ggplot(days_since, aes(x = days_since_2011, y = results$days_since_2011)) +
geom_line(color = "#9FBFB6") + ylim(c(0,6000)) + geom_rug(alpha = 0.9,color = '#D9A282', sides = "b") +
ylab("Prediction") + xlab("Days since 2011")
p2 = ggplot(days_since, aes(x = temp, y=results$temp)) + geom_line(color = "#9FBFB6") + ylim(c(0,6000)) +
geom_rug(alpha = 0.9, color = '#D9A282',sides = "b")+ xlab("Temperature")
p3 = ggplot(days_since, aes(x = hum, y = results$hum)) + geom_line(color = "#9FBFB6") + ylim(c(0,6000)) +
geom_rug(alpha = 0.1, color = '#D9A282',sides = "b") + xlab("Humidity")
p4 = ggplot(days_since, aes(x = windspeed, y = results$windspeed)) + geom_line(color = "#9FBFB6") + ylim(c(0,6000)) +
geom_rug(alpha = 0.1, color = '#D9A282',sides = "b") + xlab("Wind speed")
subplot(p1, p2, p3, p4, shareY = TRUE, shareX = FALSE, titleX = TRUE)
p2
p1 = ggplot(days_since, aes(x = days_since_2011, y = results$days_since_2011)) +
geom_line(color = "#9FBFB6") + ylim(c(0,6000)) + geom_rug(alpha = 0.9,color = '#D9A282', sides = "b") +
ylab("Prediction") + xlab("Days since 2011")
p2 = ggplot(days_since, aes(x = temp, y=results$temp)) + geom_line(color = "#9FBFB6") + ylim(c(0,6000)) +
geom_rug(alpha = 0.9, color = '#D9A282',sides = "b")+ xlab("Temperature")
p3 = ggplot(days_since, aes(x = hum, y = results$hum)) + geom_line(color = "#9FBFB6") + ylim(c(0,6000)) +
geom_rug(alpha = 0.1, color = '#D9A282',sides = "b") + xlab("Humidity")
p4 = ggplot(days_since, aes(x = windspeed, y = results$windspeed)) + geom_line(color = "#9FBFB6") + ylim(c(0,6000)) +
geom_rug(alpha = 0.1, color = '#D9A282',sides = "b") + xlab("Wind speed") + ylab('Partial Dependence')
subplot(p1, p2, p3, p4, shareY = TRUE, shareX = FALSE, titleX = TRUE)
p4
p1 = ggplot(days_since, aes(x = days_since_2011, y = results$days_since_2011)) +
geom_line(color = "#9FBFB6") + ylim(c(0,6000)) + geom_rug(alpha = 0.9,color = '#D9A282', sides = "b") +
ylab("Prediction") + xlab("Days since 2011")
p2 = ggplot(days_since, aes(x = temp, y=results$temp)) + geom_line(color = "#9FBFB6") + ylim(c(0,6000)) +
geom_rug(alpha = 0.9, color = '#D9A282',sides = "b")+ xlab("Temperature")
p3 = ggplot(days_since, aes(x = hum, y = results$hum)) + geom_line(color = "#9FBFB6") + ylim(c(0,6000)) +
geom_rug(alpha = 0.1, color = '#D9A282',sides = "b") + xlab("Humidity")
p4 = ggplot(days_since, aes(x = windspeed, y = results$windspeed)) + geom_line(color = "#9FBFB6") + ylim(c(0,6000)) +
geom_rug(alpha = 0.7, color = '#D9A282',sides = "b") + xlab("Wind speed") + ylab('Partial Dependence')
subplot(p1, p2, p3, p4, shareY = TRUE, shareX = FALSE, titleX = TRUE)
p4
p1 = ggplot(days_since, aes(x = days_since_2011, y = results$days_since_2011)) +
geom_line(color = "#9FBFB6") +
ylim(c(0,6000)) +
geom_rug(alpha = 0.7,color = '#D9A282', sides = "b") +
ylab("Prediction") +
xlab("Days since 2011")
p2 = ggplot(days_since, aes(x = temp, y=results$temp)) +
geom_line(color = "#9FBFB6") +
ylim(c(0,6000)) +
geom_rug(alpha = 0.7, color = '#D9A282',sides = "b")+
xlab("Temperature") +ylab("Prediction")
p3 = ggplot(days_since, aes(x = hum, y = results$hum)) +
geom_line(color = "#9FBFB6") +
ylim(c(0,6000)) +
geom_rug(alpha = 0.7, color = '#D9A282',sides = "b") +
xlab("Humidity")+ ylab("Prediction")
p4 = ggplot(days_since, aes(x = windspeed, y = results$windspeed)) +
geom_line(color = "#9FBFB6") +
ylim(c(0,6000)) +
geom_rug(alpha = 0.7, color = '#D9A282',sides = "b") +
xlab("Wind speed") + ylab("Prediction")
subplot(p1, p2, p3, p4, shareY = TRUE, shareX = FALSE, titleX = TRUE)
p1
p2
p3
p4
sampled <- sample_n(days_since, 40)
temp <- sampled$temp
hum <- sampled$hum
th <- inner_join(data.frame(temp),data.frame(hum), by=character())
th$p <- 0
for(i in 1:nrow(th)){
r <- days_since
r[["temp"]] <- th[["temp"]][i]
r[["hum"]] <- th[["hum"]][i]
sal <- predict(rf, r)$predicted
th[["p"]][i] <- sum(sal) / nr
}
ggplot(th, aes(x=temp, y=hum)) + geom_tile(aes(fill = p, width = 10, height = 15)) + geom_rug(alpha = 0.01) + xlab("Temperature") + ylab("Humidity") + scale_fill_gradient(name = "Number of bikes")
ggplot(th, aes(x=temp, y=hum)) + geom_tile(aes(fill = p, width = 10, height = 15)) + geom_rug(alpha = 0.1) + xlab("Temperature") + ylab("Humidity") + scale_fill_gradient(name = "Number of bikes")
ggplot(th, aes(x=temp, y=hum)) + geom_tile(aes(fill = p, width = 10, height = 15)) + geom_rug(alpha = 0.01) + xlab("Temperature") + ylab("Humidity") + scale_fill_gradient(name = "Number of bikes")
# Using scale_fill_gradientn()
ggplot(th, aes(x = temp, y = hum)) +
geom_tile(aes(fill = p), width = 10, height = 15) +
geom_rug(alpha = 0.01) +
xlab("Temperature") +
ylab("Humidity") +
scale_fill_gradientn(name = "Number of bikes",
colors = c("blue", "white", "red"),
values = scales::rescale(c(10, 50, 90))) +
theme_minimal()
ggplot(th, aes(x=temp, y=hum)) + geom_tile(aes(fill = p, width = 10, height = 15)) + geom_rug(alpha = 0.01) + xlab("Temperature") + ylab("Humidity") + scale_fill_gradient(name = "Number of bikes")
# Using scale_fill_gradient2()
ggplot(th, aes(x = temp, y = hum)) +
geom_tile(aes(fill = p), width = 10, height = 15) +
geom_rug(alpha = 0.01) +
xlab("Temperature") +
ylab("Humidity") +
scale_fill_gradient2(name = "Number of bikes", low = "blue", mid = "white", high = "red", midpoint = 50) +
theme_minimal()
ggplot(th, aes(x = temp, y = hum)) +
geom_tile(aes(fill = p), width = 10, height = 15) +
geom_rug(alpha = 0.01) +
xlab("Temperature") +
ylab("Humidity") +
scale_fill_gradientn(name = "Number of bikes",
colors = c("blue", "white", "red"),
values = scales::rescale(c(10, 50, 90))) +
theme_minimal()
ggplot(th, aes(x = temp, y = hum)) +
geom_tile(aes(fill = p), width = 10, height = 15) +
geom_rug(alpha = 0.01) +
xlab("Temperature") +
ylab("Humidity") +
scale_fill_gradientn(name = "Number of bikes",
colors = c("#9FBFB6", "white", "#D9A282"),
values = scales::rescale(c(10, 50, 90))) +
theme_minimal()
p = ggplot(th, aes(x = temp, y = hum)) +
geom_tile(aes(fill = p), width = 10, height = 15) +
geom_rug(alpha = 0.01) +
xlab("Temperature") +
ylab("Humidity") +
scale_fill_gradientn(name = "Number of bikes",
colors = c("#9FBFB6", "white", "#D9A282"),
values = scales::rescale(c(10, 50, 90))) +
theme_minimal()
p
p
set.seed(100)
d <- read.csv("Datos/kc_house_data.csv")
sampled <- sample_n(d, 1000)
sampled <- select(sampled, bedrooms, bathrooms, sqft_living, sqft_lot, floors, yr_built, price)
rf <- rfsrc(price~., data=sampled)
results <- select(sampled, bedrooms, bathrooms, sqft_living, floors, price)
nr <- nrow(sampled)
for(c in names(results)[1:4])
{
for(i in 1:nr){
r <- sampled
r[[c]] <- sampled[[c]][i]
sal <- predict(rf, r)$predicted
results[[c]][i] <- sum(sal) / nr
}
}
plot1 = ggplot(sampled, aes(x = bedrooms, y = results$bedrooms)) + geom_line() + geom_rug(alpha = 0.1, sides = "b") + ylab("Prediction") + xlab("Bedrooms")
plot2 = ggplot(sampled, aes(x = bathrooms, y = results$bathrooms)) + geom_line() + geom_rug(alpha = 0.1, sides = "b") + xlab("Bathrooms")
plot3 = ggplot(sampled, aes(x = sqft_living, y = results$sqft_living)) + geom_line() + geom_rug(alpha = 0.1, sides = "b") + xlab("Sqft Living")
plot4 = ggplot(sampled, aes(x = floors, y = results$floors)) + geom_line() + geom_rug(alpha = 0.1, sides = "b")+ xlab("Floors")
subplot(plot1, plot2, plot3, plot4, shareX = FALSE, titleX = TRUE)
plot1 = ggplot(sampled, aes(x = bedrooms, y = results$bedrooms)) +
geom_line(color = '#9FBFB6') +
geom_rug(alpha = 0.1, sides = "b") +
ylab("Prediction") + xlab("Bedrooms")
plot2 = ggplot(sampled, aes(x = bathrooms, y = results$bathrooms)) +
geom_line() +
geom_rug(alpha = 0.1, sides = "b") +
xlab("Bathrooms")
plot3 = ggplot(sampled, aes(x = sqft_living, y = results$sqft_living)) +
geom_line() +
geom_rug(alpha = 0.1, sides = "b") +
xlab("Sqft Living")
plot4 = ggplot(sampled, aes(x = floors, y = results$floors)) +
geom_line() +
geom_rug(alpha = 0.1, sides = "b")+
xlab("Floors")
subplot(plot1, plot2, plot3, plot4, shareX = FALSE, titleX = TRUE)
plot1 = ggplot(sampled, aes(x = bedrooms, y = results$bedrooms)) +
geom_line(color = '#9FBFB6') +
geom_rug(alpha = 0.7, color = '#D9A282',sides = "b") +
ylab("Prediction") + xlab("Bedrooms")
plot2 = ggplot(sampled, aes(x = bathrooms, y = results$bathrooms)) +
geom_line(color = '#9FBFB6') +
geom_rug(alpha = 0.7, color = '#D9A282',sides = "b") +
xlab("Bathrooms")
plot3 = ggplot(sampled, aes(x = sqft_living, y = results$sqft_living)) +
geom_line(color = '#9FBFB6') +
geom_rug(alpha = 0.7,color = '#D9A282', sides = "b") +
xlab("Sqft Living")
plot4 = ggplot(sampled, aes(x = floors, y = results$floors)) +
geom_line(color = '#9FBFB6') +
geom_rug(alpha = 0.7, color = '#D9A282',sides = "b")+
xlab("Floors")
subplot(plot1, plot2, plot3, plot4, shareX = FALSE, titleX = TRUE)
subplot(plot1, plot2, plot3, plot4, shareX = FALSE, titleX = TRUE)
